@page

<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/extjs/6.2.0/ext-all-debug.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/extjs/6.2.0/classic/theme-triton/resources/theme-triton-all-debug.css">
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/extjs/6.2.0/classic/theme-triton/theme-triton-debug.js"></script>
   
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <title></title>
</head>
<body>
<div>
    <script >
    var START_URL = "https://localhost:7135"
    
    Ext.application({
        name: 'MyApp',
        launch: function () {
            var container = Ext.getBody(); 
            container.setStyle({
                width: '100%',
                overflow: 'hidden'
            });
                    
            Ext.create('Ext.Button', {
                text: 'Добавить модератора / пользователя в систему',
                renderTo: Ext.getBody(),
                margin: 40,
                height: 30,
                handler: function () {
                    var userWindow = Ext.create('Ext.window.Window', {
                        title: 'Добавить пользователя',
                        layout: 'form',
                        items: [{
                            xtype: 'form',
                            itemId: 'userForm',
                            items: [{
                                xtype: 'textfield',
                                fieldLabel: 'Name',
                                name: 'name'
                            }, {
                                xtype: 'textfield',
                                fieldLabel: 'Email',
                                name: 'email'
                            }, {
                                xtype: 'textfield',
                                fieldLabel: 'Password',
                                name: 'password',
                                inputType: 'password' // Поле для пароля с маскировкой ввода
                            }]
                        }],
                        buttons: [{
                            text: 'Сохранить',
                            handler: function () {
                                var form = userWindow.down('#userForm').getForm();
                                if (form.isValid()) {
                                    var formData = form.getValues();
        
                                    Ext.Ajax.request({
                                        url: START_URL + '/Admin/CreateOrUpdateUser',
                                        method: 'POST',
                                        jsonData: formData,
                                        success: function (response) {
                                            console.log('Данные успешно отправлены', response);
                                            userWindow.close();
                                        },
                                        failure: function (response) {
                                            console.error('Ошибка при отправке данных', response);
                                        }
                                    });
                                }
                            }
                        }, {
                            text: 'Отмена',
                            handler: function () {
                                userWindow.close();
                            }
                        }]
                    });
        
                    userWindow.show();
                }
            });
                    
                    
            
            Ext.define('Report', {
                extend: 'Ext.data.Model',
                fields: [
                    'id', 'name', 'email', 'typeUserRole'
                ]
            });
    
            var store = Ext.create('Ext.data.Store', {
                sorters: [{
                    property: 'Id'
                }],
                model: 'Report',
                proxy: {
                    type: 'rest',
                    url: START_URL + '/Auth/GetAll', 
                    reader: {
                        type: 'json',
                        rootProperty: 'data'
                    },
                    wrter: {
                        type: 'json'
                    }
                },         
                autoLoad: true 
            });
    
            
            var grid = Ext.create('Ext.grid.Panel', {
                title: 'Рабоа и назначение новых владельцев автосервисов',
                store: store,
                columns: [
                    { text: 'ID', dataIndex: 'id', editor: 'textfield'},
                    { text: 'Юзернейм', dataIndex: 'name', editor: 'textfield', flex: 1 },
                    { text: 'Почта', dataIndex: 'email', editor: 'textfield', flex: 1 },
                    { text: 'Роль пользователя', dataIndex: 'typeUserRole', editor: 'textfield',flex: 1 },
                    {
                        xtype: 'actioncolumn',
                        text: 'Удаление', 
                        items: [{
                            iconCls: 'x-fa fa-trash-o', 
                            tooltip: 'Методы',
                            handler: function (grid, rowIndex, colIndex) {
                                var record = grid.getStore().getAt(rowIndex);
                                var reportId = record.get('id');
                                Ext.Ajax.request({
                                    url: START_URL + '/Admin/DeleteUserId/' + reportId,
                                    method: 'DELETE',
                                    success: function (response, opts) { 
                                        alert("Запись с ReportId " + reportId + " удалена");
                                        store.remove(record);
                                    },
                                    failure: function (response, opts) {
                                        alert("Произошла ошибка при удалении записи");
                                    }
                                });
                                
                            }
                        }]
                    }
                ],
                viewConfig: {
                    getRowClass: function(rec) {
                        var id = rec.get('Id');
                        if (id === 0) {
                            return 'green-row';
                        }
                        else {
                            return 'white-row';
                        }
                    }
                },
               selType: 'rowmodel',
               plugins: [
                Ext.create('Ext.grid.plugin.RowEditing', {
                    clicksToEdit: 2,
                    saveBtnText: 'Сохранить',
                    cancelBtnText: 'Отменить',
                    listeners: {
                        edit: function (editor, context) {
                            var record = context.record;
                            var changes = record.getChanges();
                            var allFields = record.getFields();
                            var dataToSend = {};
        
                            // Получаем все поля записи и добавляем их в объект для отправки
                            allFields.forEach(function (field) {
                                var fieldName = field.name;
                                var fieldValue = record.get(fieldName);
        
                                // Если поле изменилось или было добавлено, добавляем его в объект для отправки
                                if (changes.hasOwnProperty(fieldName)) {
                                    dataToSend[fieldName] = changes[fieldName];
                                } else {
                                    dataToSend[fieldName] = fieldValue;
                                }
                            });
        
                            Ext.Ajax.request({
                                url: START_URL + '/Admin/EditUserName',
                                method: 'PUT',
                                jsonData: dataToSend,
                                success: function (response) {
                                    console.log('Успешно обновлено', response);
                                },
                                failure: function (response) {
                                    console.error('Ошибка при обновлении', response);
                                }
                            });
                        }
                    }
                })
                ],
                  
                                        
                renderTo: Ext.getBody()
            });
            
        }
        
    });
    </script>
    
    
    @*
    12.01
    Create, update, delete repo for assortments 
    View for Studia before assortments grid.
    Create assortments page for react-client
    Do Authorize for users react
*@
</div>
</body>
</html>